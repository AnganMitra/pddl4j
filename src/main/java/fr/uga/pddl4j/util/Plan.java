/*
 * Copyright (c) 2016 by Damien Pellier <Damien.Pellier@imag.fr>.
 *
 * This file is part of PDDL4J library.
 *
 * PDDL4J is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * PDDL4J is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with PDDL4J.  If not, see
 * <http://www.gnu.org/licenses/>
 */

package fr.uga.pddl4j.util;

import java.util.List;
import java.util.Set;

/**
 * This interface defines the main methods of to access a plan generated by a planner.
 *
 * @author D. Pellier
 * @version 1.0 - 14.03.2016
 *
 * @since 3.0
 */
public interface Plan {

    /**
     * Returns the size of the plan. The size of the plan is its number of actions.
     *
     * @return the size of the plan.
     */
    int size();

    /**
     * Returns the makespan of the plan. The makespan is the the time difference between the start and finish of the
     * plan.
     *
     * @return the makespan of the plan.
     */
    double makespan();

    /**
     * Returns the cost of the plan. The cost of a plan is the sum of the cost of its actions.
     *
     * @retun the cost of the plan.
     */
    double cost();

    /**
     * Returns the ordered set of time specifiers used in this plan.
     *
     * @return the ordered set of time specifiers used in this plan.
     */
    Set<Integer> timeSpecifiers();

    /**
     * Returns the list of actions contained in the plan in the ordering of their time specifiers.
     *
     * @return the ordered set of actions of the plan.
     */
    List<BitOp> actions();

    /**
     * Returns the set of actions at a specified time specifier.
     *
     * @param time the time specifier.
     * @return the set of actions at a specified time specifier or null if no actions are scheduled in the plan at the
     *     the time specifier.
     */
    Set<BitOp> getActionSet(final int time);

    /**
     * Returns if the plan is empty.
     *
     * @return <code>true</code> if the plan is empty; <code>false</code> otherwise.
     */
    boolean isEmpty();

    /**
     * Removes all the actions of the plan.
     */
    void clear();

    /**
     * Adds an action at a specified time specifier in the plan.
     *
     * @param action the action to add.
     * @param time the time specifier of the action in the plan.
     * @return <code>true</code> if the action was added; <code>false</code> otherwise.
     */
    boolean add(final int time, final BitOp action);

    /**
     * Removes an action at a specified time specifier of the plan.
     *
     * @param action the action to remove.
     * @param time the time specifier of the action in the plan to remove.
     * @return <code>true</code> if the action was removed; <code>false</code> otherwise.
     */
    boolean remove(final int time, final BitOp action);

    /**
     * Removes all the actions at a specified time specifier of the plan.
     *
     * @param time the time specifier of the actions in the plan to remove.
     * @return <code>true</code> if the action was removed; <code>false</code> otherwise.
     */
    boolean remove(final int time);

    /**
     * Returns if an action is contained in the plan at a specified time specifier.
     *
     * @param time the time specifier.
     * @param action the action.
     * @return <code>true</code> if the specified action is contained in the plan at the specified time specifier;
     *     <code>false</code> otherwise.
     */
    boolean contains(final int time, final BitOp action);


}


